<body-tag>
  <div>
    <unauth-nav-tag context="{this}" if="{data.pages.register || data.pages.login}"></unauth-nav-tag>
    <nav-tag context="{this}" if="{data.navbar}"></nav-tag>
    <div class="uk-container">
      <ul class="uk-breadcrumb uk-align-right">
        <li><a href="#">Bread</a></li>
        <li><a href="#">Crumb</a></li>
        <li class="uk-disabled"><a>Comming</a></li>
        <li><span>soon</span></li>
      </ul>
      <register-page context="{this}" if="{data.pages.register}"></register-page>
      <login-page context="{this}" if="{data.pages.login}"></login-page>
      <error-page context="{this}" if="{data.pages.error}"></error-page>
      <location-list-page context="{this}" if="{data.pages.location_list}"></location-list-page>
      <location-add-update-page context="{this}" if="{data.pages.location_add_update}"></location-add-update-page>
      <location-detail-page context="{this}" if="{data.pages.location_detail}"></location-detail-page>
      <hive-add-update-page context="{this}" if="{data.pages.hive_add_update}"></hive-add-update-page>
      <hive-detail-page context="{this}" if="{data.pages.hive_detail}"></hive-detail-page>
    </div>
  </div>

  <script>
    export default {
	onBeforeMount(props) {
            this.data = { pages: {} }
	},

	uikit() {
            return UIkit
	},

	updateData(newData) {
	    this.data = newData
	    this.update()
	},

	updateHistory(newData) {
	    if (newData.history_state
		&& (!window.history.state
		    || !window.history.state.data_url
		    || (window.history.state.data_url
			&& (window.history.state.data_url != newData.data_url)))) {
		window.history.pushState({data_url: newData.data_url},
					 newData.history_state.title,
					 newData.history_state.url)
	    }
	},

	refreshDataGet(dataUrl) {
            fetch(dataUrl)
		.then(res => res.json())
      		.then(newData => {
		    this.updateData(newData)
		    this.updateHistory(newData)
		})
		.catch(err => console.error(err));
	},

	refreshDataPost(dataUrl, csrfToken) {
	    this.postRequest(dataUrl, csrfToken, {})
	},

	postRequest(dataUrl, csrfToken, json, callbackFun) {
	    fetch(dataUrl,
		  { method: "POST",
		    headers: {'Accept': 'application/json',
			      'Content-Type': 'application/json',
			      'x-csrf-token': csrfToken},
		    body: JSON.stringify(json)}
		 ).then(async rawResponse => {
		     var newData = await rawResponse.json()
		     if (typeof callbackFun === 'function') {
			 callbackFun(newData)
		     } else {
			 this.updateData(newData)
			 this.updateHistory(newData)
		     }
		 })
	},

	postForm(dataUrl, csrfToken, formSelector, callbackFun) {
	    const formData = new FormData(this.$(formSelector))
	    const formJson = Object.fromEntries(formData.entries())
	    this.postRequest(dataUrl, csrfToken, formJson, callbackFun)
	},


    }
  </script>
</body-tag>
